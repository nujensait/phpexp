Домашнее задание к вебинару №22 «Unit-тестирование»

(*) поставнока задачи тут: 
https://drive.google.com/file/d/1yAtmj9DE2yFeGh26WxDwr42j7RVbB_PI/view

=========================================

Описание тестов (мое решение, версия 1.0): 

Модульные тесты:

1. Если card_holder содержит более одного пробела, то
тестируемый метод возвращает 400 с сообщением об ошибке 
error_message="Неверное имя владельца карты"

2. Если card_number (после удаления всех символов кроме цифр) не равен самому себе
до этой очистки, значит была попытка подмены номера,
ИЛИ очищенный номер содержит не 16 цифр
- тестируемый метод возвращает 400 с сообщением об ошибке "Неверный номер карты"  

3. Если card_expiration содержит просроченную дату (год и месяц менее или равны текущему)
ИЛИ если месяц меньше 1 или больше 12
ИЛИ если год меньше текущего или больше текущего + 10 лет 
(на больший срок карты не выпускают) 
- тестируемый метод возвращает 400 с сообщением об ошибке "Неверный срок действия карты"

3. Если cvv содержит не три цифры 
- тестируемый метод возвращает 400 с сообщением об ошибке "Неверный код CVV"

4. Если order_number содержит менее N или боллее 16 символов,  
- тестируемый метод возвращает 400 с сообщением об ошибке "Неверный номер заказа"

5. Если sum после замены "," на "." и приведению ее к float через floatval() не равна
исходному строковому значению (где также сделана замена "," => ".")
ИЛИ если приведенное значение sum меньше или равно 0
- тестируемый метод возвращает 400 с сообщением об ошибке "Неверная сумма заказа"

=========================================

2. Интеграционные тесты:

Проверяем связку «фронт-бэк»:

1. Если с бэка приходит ошибка с ключом "card_holder", 
то после получения ответа от бэка на фронте выделяется поле
«Владелец карты» красной рамкой и выводится текст, передаваемый с бэка в "error_message"
("Неверное имя владельца карты");

2. Если с бэка приходит ошибка с ключом "card_number", 
то после получения ответа от бэка на фронте выделяется поле
«Номер карты» красной рамкой и выводится текст, передаваемый с бэка в "error_message"
("Неверный номер карты");

3. Если с бэка приходит ошибка с ключом "card_expiration", 
то после получения ответа от бэка на фронте выделяется поле
«Срок действия» красной рамкой и выводится текст, передаваемый с бэка в "error_message"
("Неверный срок действия карты");

4. Если с бэка приходит ошибка с ключом "order_number", 
то после получения ответа от бэка на фронте выводится текст, передаваемый с бэка 
в "error_message"
("Неверный номер заказа");

5. Если с бэка приходит ошибка с ключом "sum", 
то после получения ответа от бэка на фронте выводится текст, передаваемый с бэка 
в "error_message"
("Неверная сумма заказа");

Проверяем связку «бэк-репозиторий»:

1. если валидация данных на бэке проходит успешно, обращаемся к методу setOrderIsPaid,
который может вернуть true/false либо exception
2. если метод возврает true/false, бэкенд возвращает соотв. result
3. если метод генерирует исключение, бэкенд возвращает result=false и в отдельном поле 
- описание ошибки (если есть) 

Проверяем связку «бэк-сервис А»:
1. Если данные после их валидации на бэке верные, то передаем их в API-запросе на сервис A. 
Сервис A пытается списать деньги, если ему это не удаётся, то он возвращает
HTTP-код 403, если удаётся, то HTTP-код 200. 
2. Бэк при этом возвращает result=true/false c текстовым описанием ошибки 
в поле "error_message"
вида "Платеж прошел успешно" или "Ошибка выполнения платежа"

=========================================

3. Системные тесты:
1. Если значение поля ХХХ неверено, то после получения ответа от бэка на фронте
выводится соотв. сообщение об ошибке «Неверный ХХХ» (текст сообщения передается 
в отдельном поле в response).
2. Если все валидно и оплата успешно проходит, во всплывающем окне выводится 
соотв. сообщение
"Оплата прошла успешно. Места забронированы."
3. Если происходит ошибка оплаты (например, нехватка средств на карте), 
во всплывающем окне выводится соотв. сообщение
"Ошибка оплаты: ХХХ", где текст ХХХ передается из бэка в поле "error_message" 
(если тут пусто, то "попробуйте повторить попытку")  

=========================================

"Поскольку мы тестируем оплату, то стоимость тестирования в
некоторых ситуациях будет выражаться в реальных денежных затратах,
а не в виртуальных. Стоит обратить на это внимание и, возможно,
предложить способы удешевления тестирования."

Удешевляем тестирование воздание "фейкеров"/mock-class:
довние сервиса А, который будет возвращать нам всегда успех
(или рандомно - успех/неудача, имитируя нехватку денег на балансе карты).
Т.о, не будет фактических списаний с карты. Разве что в финальном тестировании.   

=========================================