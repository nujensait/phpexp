1. Убедитесь, что в вашей задаче есть один основной компонент и несколько опциональных дополнений или надстроек над ним.

2. Создайте интерфейс компонента, который описывал бы общие методы как для основного компонента, так и для его дополнений.

3.  Создайте класс конкретного компонента и поместите в него основную бизнес-логику.

4.  Создайте базовый класс декораторов. Он должен иметь поле для хранения ссылки на вложенный объект-компонент.
Все методы базового декоратора должны делегировать действие вложенному объекту.

5.  И конкретный компонент, и базовый декоратор должны следовать одному и тому же интерфейсу компонента.

6.  Теперь создайте классы конкретных декораторов, наследуя их от базового декоратора. Конкретный декоратор должен
выполнять свою добавочную функцию, а затем (или перед этим) вызывать эту же операцию обёрнутого объекта.

7.  Клиент берёт на себя ответственность за конфигурацию и порядок обёртывания объектов.

В этом примере паттерн Декоратора помогает создать сложные правила фильтрации текста для приведения информации в порядок
перед её отображением на веб-странице. Разные типы информации, такие как комментарии, сообщения на форуме или личные
сообщения, требуют разных наборов фильтров.

Например, вы хотели бы удалить весь HTML из комментариев и в тоже время сохранить некоторые основные теги HTML в
сообщениях на форуме. Кроме того, вы можете пожелать разрешить публикацию в формате Markdown, который должен быть
обработан перед какой-либо фильтрацией HTML. Все эти правила фильтрации могут быть представлены в виде отдельных классов
декораторов, которые могут быть сложены в стек по-разному, в зависимости от характера содержимого.