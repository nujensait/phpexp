Компоновщик — это структурный паттерн проектирования, который позволяет сгруппировать множество объектов в древовидную
структуру, а затем работать с ней так, как будто это единичный объект.

Паттерн Компоновщик имеет смысл только тогда, когда основная модель вашей программы может быть структурирована
в виде дерева.

Например, есть два объекта: Продукт и Коробка. Коробка может содержать несколько Продуктов и других Коробок поменьше.
Те, в свою очередь, тоже содержат либо Продукты, либо Коробки и так далее.

Теперь предположим, ваши Продукты и Коробки могут быть частью заказов. Каждый заказ может содержать как простые Продукты
без упаковки, так и составные Коробки. Ваша задача состоит в том, чтобы узнать цену всего заказа.

Если решать задачу в лоб, то вам потребуется открыть все коробки заказа, перебрать все продукты и посчитать их суммарную
стоимость. Но это слишком хлопотно, так как типы коробок и их содержимое могут быть вам неизвестны. Кроме того, наперёд
неизвестно и количество уровней вложенности коробок, поэтому перебрать коробки простым циклом не выйдет.

Компоновщик предлагает рассматривать Продукт и Коробку через единый интерфейс с общим методом получения стоимости.

Продукт просто вернёт свою цену. Коробка спросит цену каждого предмета внутри себя и вернёт сумму результатов.
Если одним из внутренних предметов окажется коробка поменьше, она тоже будет перебирать своё содержимое, и так далее,
пока не будут посчитаны все составные части.


Применимость
Когда вам нужно представить древовидную структуру объектов.

Паттерн Компоновщик предлагает хранить в составных объектах ссылки на другие простые или составные объекты. Те, в свою
очередь, тоже могут хранить свои вложенные объекты и так далее. В итоге вы можете строить сложную древовидную структуру
данных, используя всего две основные разновидности объектов.

Когда клиенты должны единообразно трактовать простые и составные объекты.

Благодаря тому, что простые и составные объекты реализуют общий интерфейс, клиенту безразлично, с каким именно объектом
ему предстоит работать.



1. Убедитесь, что вашу бизнес-логику можно представить как древовидную структуру. Попытайтесь разбить её на простые
компоненты и контейнеры. Помните, что контейнеры могут содержать как простые компоненты, так и другие вложенные
контейнеры.

2. Создайте общий интерфейс компонентов, который объединит операции контейнеров и простых компонентов дерева.
Интерфейс будет удачным, если вы сможете использовать его, чтобы взаимозаменять простые и составные компоненты без
потери смысла.

3. Создайте класс компонентов-листьев, не имеющих дальнейших ответвлений. Имейте в виду, что программа может содержать
несколько таких классов.

4. Создайте класс компонентов-контейнеров и добавьте в него массив для хранения ссылок на вложенные компоненты. Этот
массив должен быть способен содержать как простые, так и составные компоненты, поэтому убедитесь, что он объявлен с
типом интерфейса компонентов.

5. Реализуйте в контейнере методы интерфейса компонентов, помня о том, что контейнеры должны делегировать основную
работу своим дочерним компонентам.

6. Добавьте операции добавления и удаления дочерних компонентов в класс контейнеров.

7. Имейте в виду, что методы добавления/удаления дочерних компонентов можно поместить и в интерфейс компонентов. Да, это
нарушит принцип разделения интерфейса, так как реализации методов будут пустыми в компонентах-листьях. Но зато все
компоненты дерева станут действительно одинаковыми для клиента.

Паттерн Компоновщик может упростить работу с любыми древовидными рекурсивными структурами. Примером такой структуры
является DOM-дерево HTML. Например, в то время как различные входные элементы могут служить листьями, сложные элементы,
такие как формы и наборы полей, играют роль контейнеров.

Имея это в виду, вы можете использовать паттерн Компоновщик для применения различных типов поведения ко всему дереву
HTML точно так же, как и к его внутренним элементам, не привязывая ваш код к конкретным классам дерева DOM. Примерами
такого поведения может быть рендеринг элементов DOM, их экспорт в различные форматы, проверка достоверности их
частей и т.д.

С паттерном Компоновщик вам не нужно проверять, является ли тип элемента простым или сложным, перед реализацией
поведения. В зависимости от типа элемента, оно либо сразу же выполняется, либо передаётся всем дочерним элементам.